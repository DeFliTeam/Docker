# SSH 

Once you have conntected your Raspberry Pi Board (or RockPi/nxp) you will need to ssh in to it. 
On macOS, you can do this via the Terminal app, on Windows, you can use https://www.putty.org/ You can connect to your new device via SSH entering this command ssh username@new.device.ip.addresss in Terminal/PuTTY.

# Raspberry Pi DHCPCD Issue 

Some users have reported issues with Raspberry Pi devices loosing network connectivity when running multiple containers. In effort to prevent this, run the following command echo "denyinterfaces veth*" >> /etc/dhcpcd.conf. This will append the line denyinterfaces veth* to end of the file.  
The file will look something like this (note the last line): 
# A sample configuration for dhcpcd.
# See dhcpcd.conf(5) for details.

# Allow users of this group to interact with dhcpcd via the control socket.
#controlgroup wheel

# Inform the DHCP server of our hostname for DDNS.
hostname

# Use the hardware address of the interface for the Client ID.
clientid
# or
# Use the same DUID + IAID as set in DHCPv6 for DHCPv4 ClientID as per RFC4361.
# Some non-RFC compliant DHCP servers do not reply with this set.
# In this case, comment out duid and enable clientid above.
#duid

# Persist interface configuration when dhcpcd exits.
persistent

# Rapid commit support.
# Safe to enable by default because it requires the equivalent option set
# on the server to actually work.
option rapid_commit

# A list of options to request from the DHCP server.
option domain_name_servers, domain_name, domain_search, host_name
option classless_static_routes
# Respect the network MTU. This is applied to DHCP routes.
option interface_mtu

# Most distributions have NTP support.
#option ntp_servers

# A ServerID is required by RFC2131.
require dhcp_server_identifier

# Generate SLAAC address using the Hardware Address of the interface
#slaac hwaddr
# OR generate Stable Private IPv6 Addresses based from the DUID
slaac private

# Example static IP configuration:
#interface eth0echo "denyinterfaces veth*" >> /etc/dhcpd.conf
#static ip_address=192.168.0.10/24
#static ip6_address=fd51:42f8:caae:d92e::ff/64
#static routers=192.168.0.1
#static domain_name_servers=192.168.0.1 8.8.8.8 fd51:42f8:caae:d92e::1

# It is possible to fall back to a static IP if DHCP fails:
# define static profile
#profile static_eth0
#static ip_address=192.168.1.23/24
#static routers=192.168.1.1
#static domain_name_servers=192.168.1.1

# fallback to static profile on eth0
#interface eth0
#fallback static_eth0
denyinterfaces veth* 

After saving this file, restart DHCPCD 

sudo systemctl restart dhcpcd 

# Docker-Install 

The docker-install.sh script helps users get ready to use the DeFli Docker containers (curl -s https://raw.githubusercontent.com/DeFliTeam/Docker/main/install.sh)
It will check, and if necessary install the following components and settings: 

docker 

install docker 
(optional) add the current user to the sudoers group and enable password-free use of sud6 configure log limits for Docker
configure log limits for Docker
configure $PATH environment for Docker
add current user to docker group

docker compose 

Install latest stable docker compose plugin
Make sure that libseccomp2 is of a new enough version to support Bullseye-based Docker containers
Update udev rules for use with DeFli Receivers 
Blacklist SDR drivers so the DeFli' ADSB and ACARS containers can access the DeFli Receiver. Unload any preloaded drivers.
on dhcpd based systems, exclude Docker Container-based virtual ethernet interfaces from using DHCP
After running this script, your system should be ready to use docker and docker compose. A sample docker-compose.yml has been included in the docker-install repository.

# Running the DeFli Script 

To run the DeFli script you will require the script location which is obtained post license purchase you then use the command 
bash <(curl -s https://raw.githubusercontent.com/DeFliTeam/Docker/main/install.sh)
