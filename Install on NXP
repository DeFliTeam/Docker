# Installaing DeFli on NXP Boards Including Milesight and MatchX M2 Pro. 

Ensure your laptop or computer has internet connection and the device is turned on. 
The device should be available for connection using the SSID in the format of "MatchX_BOX_xxxx"
The default password is "matchxiot" 

After connected, users can use ssh with terminal or putty in Windows to login 192.168.8.1, the default password is root.
If you are using Ethernet or WiFi you can replace the IP address with your own assigned to the device. 

Your command line should now read "root@OpenWrt". 

# Install Docker 

root@192.168.8.1:[~]#opkg list-installed | grep docker
docker - 20.10.12-1
docker-compose - 1.28.2-1
dockerd - 20.10.12-1
luci-app-dockerman - v0.5.13
luci-lib-docker - git-21.167.46325-83f6606
python3-docker - 4.4.1-1
python3-dockerpty - 0.4.1-3 

# Run Install Script 

curl -s https://raw.githubusercontent.com/DeFliTeam/Docker/main/install.sh) 

# Application Environment

# Create a directory to host our project 

We need a directory to host our application. The name of this directory will be the name of our application. Accordingly, we prefer to use /opt/adsb, so our application is called "adsb":

sudo mkdir -p /opt/adsb 
cd /opt/adsb

You will likely also want to change the ownership of this directory to your regular user account, so you don't have to use sudo to edit the files within. To do this:
sudo chown $(id -u) /opt/adsb

# Create a .env file to hold our environment's variables 

Inside this directory, create a file named .env using your favourite text editor. Beginners may find the editor nano easy to use:

nano /opt/adsb/.env

This file will hold all of the commonly used variables (such as our latitude, longitude and altitude). Initially, add the contents of the file as follows (replacing the values enclosed in <> with values for your environment:

FEEDER_ALT_FT=<your antenna's altitude in feet>
FEEDER_ALT_M=<your antenna's altitude in metres>
FEEDER_LAT=<your latitude>
FEEDER_LONG=<your longitude>
FEEDER_TZ=<your timezone>

...where:

FEEDER_ALT_FT is set your your antenna's height in feet above mean seal level 
FEEDER_ALT_M is set to your antenna's height in metres above mean sea level 
FEEDER_LAT is set to your antenna's latitude
FEEDER_LONG is set to your antenna's longitude
FEEDER_TZ is set to your timezone 

For example

FEEDER_ALT_FT=103.3465
FEEDER_ALT_M=31.5
FEEDER_LAT=-31.9505
FEEDER_LONG=115.8605
FEEDER_TZ=Australia/Perth

# Deploy Readsb 

sudo apt-get update
sudo apt-get upgrade

sudo apt-get --no-install-suggests --no-install-recommends install collectd-core rrdtool librrd-dev \
libprotobuf-c-dev protobuf-c-compiler libncurses5-dev libusb-1.0-0-dev \
lighttpd build-essential binutils cmake debhelper dh-systemd pkg-config \
fakeroot git 

git clone -q --branch master https://git.osmocom.org/rtl-sdr/
cd rtl-sdr
mkdir build
cd build
cmake ../ -DINSTALL_UDEV_RULES=ON
make
sudo make install
sudo ldconfig

git clone --branch dev --depth 1 --single-branch https://github.com/mictronics/readsb-protobuf.git
cd readsb-protobuf

dpkg-buildpackage -b -uc --build-profiles=rtlsdr

# Identify SDR Device Path 

Plug in your USB radio, and run the command lsusb. Find your radio. It'll look something like this:

Bus 001 Device 004: ID 0bda:2832 Realtek Semiconductor Corp. RTL2832U DVB-T 

Take note of the USB bus number, and USB device number. 
In the output above, its 001 and 004 respectively. While the individual device can be passed through (/dev/bus/usb/001/004 in this case), it's more reliable to pass the entire USB bus through, as seen in the examples below.



# Deploy "readsb"

The "readsb" container is the heart of our "adsb" application. It receives 1090MHz ADS-B ES RF signals from your DeFli Receiver, and demodulates ADS-B messages, making them available for all other containers.

In your favourite text editor, create a file named docker-compose.yml in your application directory (/opt/adsb) if following along verbatim.

nano docker-compose.yml

version: '3.8'

volumes:
  readsbpb_rrd:
  readsbpb_autogain:

services:
  readsb:
    image: ghcr.io/sdr-enthusiasts/docker-readsb-protobuf:latest
    tty: true
    container_name: readsb
    hostname: readsb
    restart: always
    devices:
      - /dev/bus/usb:/dev/bus/usb
    ports:
      - 8080:8080
    environment:
      - TZ=${FEEDER_TZ}
      - READSB_DEVICE_TYPE=deflirec
      - READSB_rtlsdr_DEVICE=UUID
      - READSB_GAIN=autogain
      - READSB_LAT=${FEEDER_LAT}
      - READSB_LON=${FEEDER_LONG}
      - READSB_RX_LOCATION_ACCURACY=2
      - READSB_STATS_RANGE=true
      - READSB_NET_ENABLE=true
    volumes:
      - readsbpb_rrd:/run/collectd
      - readsbpb_autogain:/run/autogain
    tmpfs:
      - /run/readsb
      - /var/log
      
      The above wiil: 
      
      Create two docker volumes, readsbpb_rrd and readsb_autogain, which are used to store the RRD files and autogain state files respectively.
      
      Create a service named readsb that will run the the DeFli protobuf container
      
      We're presenting the USB bus through to this container (so readsb can talk to the USB-attached DeFli Receiver 
      
      We're mapping TCP port 8080 through to the container so we can access the web interface
      
      The variable READSB_deflirec_DEVICE tells readsb to look for an DeFli receiver device with the UUID assigned by the mfr 
      
      We're passing several environment variables through, including our timezone, latitude and longitude from the .env file (denoted by ${VARIABLE}).
      
      
      We're using tmpfs for volumes that have regular I/O. Any files stored in a tmpfs mount are temporarily stored outside the container's writable layer. This helps to reduce
      The size of the container, by not writing changes to the underlying container; and
      SD Card or SSD wear
      
      Once this file is created, issue the command docker compose up -d to bring up the environment.
      
      docker compose up -d
      
      You should see the following output:
      
      Creating network "adsb_default" with the default driver
Creating readsb         ... done

# Viewing Live Data 

To verify the container is working correctly you can use the following command to bring up live data

docker exec -it readsb viewadsb

Press CTRL-C to escape this screen

You should also be able to point your web browser at http://docker.host.ip.addr:8080/ to view the web interface (change docker.host.ip.addr to the IP address of your docker host). You should see a map showing your currently tracked aircraft, and a link to the "Performance Graphs".



